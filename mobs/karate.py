from ursina import *
import random

from ursina import curve


def sound():
    from ursina.prefabs.ursfx import ursfx
    from ursina.prefabs.ursfx import ursfx
    ursfx([(0.0, 1.0), (0.29, 0.99), (0.61, 0.0), (0.72, 0.99), (1.00, 0.78)], volume=0.5, wave='triangle', pitch=-6,
          pitch_change=-6, speed=3.2,
          pitch_curve=curve.in_out_back)


class Enemy(Entity):
    def __init__(self, max_hp=20, color_=color.white, player=Entity(), **kwargs):

        self.gravity = True
        if not color_ == color.gold:
            colors_ = [color.random_color() for i in range(64)]
        else:
            colors_ = [color.rgb(o, o, o) for o in range(255 - 64,255)]

        model = Mesh(
            vertices=((-0.0, -1.0, 0.0), (0.7236, -0.447215, -0.52572), (-0.276385, -0.447215, -0.85064),
                      (0.7236, -0.447215, -0.52572), (-0.0, -1.0, 0.0), (0.7236, -0.447215, 0.52572), (-0.0, -1.0, 0.0),
                      (-0.276385, -0.447215, -0.85064), (-0.894425, -0.447215, 0.0), (-0.0, -1.0, 0.0),
                      (-0.894425, -0.447215, 0.0), (-0.276385, -0.447215, 0.85064), (-0.0, -1.0, 0.0),
                      (-0.276385, -0.447215, 0.85064), (0.7236, -0.447215, 0.52572), (0.7236, -0.447215, -0.52572),
                      (0.7236, -0.447215, 0.52572), (0.894425, 0.447215, 0.0), (-0.276385, -0.447215, -0.85064),
                      (0.7236, -0.447215, -0.52572), (0.276385, 0.447215, -0.85064), (-0.894425, -0.447215, 0.0),
                      (-0.276385, -0.447215, -0.85064), (-0.7236, 0.447215, -0.52572), (-0.276385, -0.447215, 0.85064),
                      (-0.894425, -0.447215, 0.0), (-0.7236, 0.447215, 0.52572), (0.7236, -0.447215, 0.52572),
                      (-0.276385, -0.447215, 0.85064), (0.276385, 0.447215, 0.85064), (0.7236, -0.447215, -0.52572),
                      (0.894425, 0.447215, 0.0), (0.276385, 0.447215, -0.85064), (-0.276385, -0.447215, -0.85064),
                      (0.276385, 0.447215, -0.85064), (-0.7236, 0.447215, -0.52572), (-0.894425, -0.447215, 0.0),
                      (-0.7236, 0.447215, -0.52572), (-0.7236, 0.447215, 0.52572), (-0.276385, -0.447215, 0.85064),
                      (-0.7236, 0.447215, 0.52572), (0.276385, 0.447215, 0.85064), (0.7236, -0.447215, 0.52572),
                      (0.276385, 0.447215, 0.85064), (0.894425, 0.447215, 0.0), (0.276385, 0.447215, -0.85064),
                      (0.894425, 0.447215, 0.0), (-0.0, 1.0, 0.0), (-0.7236, 0.447215, -0.52572),
                      (0.276385, 0.447215, -0.85064), (-0.0, 1.0, 0.0), (-0.7236, 0.447215, 0.52572),
                      (-0.7236, 0.447215, -0.52572), (-0.0, 1.0, 0.0), (0.276385, 0.447215, 0.85064),
                      (-0.7236, 0.447215, 0.52572), (-0.0, 1.0, 0.0), (0.894425, 0.447215, 0.0),
                      (0.276385, 0.447215, 0.85064), (-0.0, 1.0, 0.0)),
            normals=[(0.1876, -0.7947, -0.5774), (0.1876, -0.7947, -0.5774), (0.1876, -0.7947, -0.5774),
                     (0.6071, -0.7947, 0.0), (0.6071, -0.7947, 0.0), (0.6071, -0.7947, 0.0),
                     (-0.4911, -0.7947, -0.3568), (-0.4911, -0.7947, -0.3568), (-0.4911, -0.7947, -0.3568),
                     (-0.4911, -0.7947, 0.3568), (-0.4911, -0.7947, 0.3568), (-0.4911, -0.7947, 0.3568),
                     (0.1876, -0.7947, 0.5774), (0.1876, -0.7947, 0.5774), (0.1876, -0.7947, 0.5774),
                     (0.9822, -0.1876, 0.0), (0.9822, -0.1876, 0.0), (0.9822, -0.1876, 0.0), (0.3035, -0.1876, -0.9342),
                     (0.3035, -0.1876, -0.9342), (0.3035, -0.1876, -0.9342), (-0.7946, -0.1876, -0.5774),
                     (-0.7946, -0.1876, -0.5774), (-0.7946, -0.1876, -0.5774), (-0.7946, -0.1876, 0.5774),
                     (-0.7946, -0.1876, 0.5774), (-0.7946, -0.1876, 0.5774), (0.3035, -0.1876, 0.9342),
                     (0.3035, -0.1876, 0.9342), (0.3035, -0.1876, 0.9342), (0.7946, 0.1876, -0.5774),
                     (0.7946, 0.1876, -0.5774), (0.7946, 0.1876, -0.5774), (-0.3035, 0.1876, -0.9342),
                     (-0.3035, 0.1876, -0.9342), (-0.3035, 0.1876, -0.9342), (-0.9822, 0.1876, 0.0),
                     (-0.9822, 0.1876, 0.0), (-0.9822, 0.1876, 0.0), (-0.3035, 0.1876, 0.9342),
                     (-0.3035, 0.1876, 0.9342), (-0.3035, 0.1876, 0.9342), (0.7946, 0.1876, 0.5774),
                     (0.7946, 0.1876, 0.5774), (0.7946, 0.1876, 0.5774), (0.4911, 0.7947, -0.3568),
                     (0.4911, 0.7947, -0.3568), (0.4911, 0.7947, -0.3568), (-0.1876, 0.7947, -0.5774),
                     (-0.1876, 0.7947, -0.5774), (-0.1876, 0.7947, -0.5774), (-0.6071, 0.7947, 0.0),
                     (-0.6071, 0.7947, 0.0), (-0.6071, 0.7947, 0.0), (-0.1876, 0.7947, 0.5774),
                     (-0.1876, 0.7947, 0.5774), (-0.1876, 0.7947, 0.5774), (0.4911, 0.7947, 0.3568),
                     (0.4911, 0.7947, 0.3568), (0.4911, 0.7947, 0.3568)],
            mode='triangle',
            colors=colors_

        )
        super().__init__(model=model, origin_y=-1, color=color_,
                         collider='box', scale=1.7, **kwargs)

        self.health_bar = Entity(parent=self, y=2.5, model='cube', color=color.red, world_scale=(1.5, .1, .1))

        self.max_hp = max_hp
        self.hp = self.max_hp
        self.graper = 'its type'
        self.its_type = 'graper'
        self.delay = True
        self.xp_to_give = 7

        self.player = player

        self.can_damage = True

        if color_ != color.gold:
            self.dms = 2
            self.damage = 2
        else:
            self.dms = 5
            self.damage = 5

        invoke(destroy, self, delay=random.uniform(40, 80))

    def update(self):
        if distance(self, self.player) <= 3.5:
            if self.can_damage:
                self.can_damage = False
                invoke(setattr, self, 'can_damage', True, delay=1 / self.dms)
                self.rotation_y += 90
                self.player.health -= self.damage
        else:
            self.look_at_2d(self.player.position, 'y')
            ray = raycast(self.position, self.forward, ignore=(self,), distance=.5, debug=False)

            if not ray.hit:
                self.position += self.forward * time.dt * 1
                invoke(setattr, self, 'gravity', True, delay=1)
            else:
                self.y += 1
                ray = raycast(self.position, self.forward, ignore=(self,), distance=.5, debug=False)

                if not ray.hit:
                    self.position += self.forward * time.dt * 5
                    invoke(setattr, self, 'gravity', True, delay=1)
                self.gravity = False
            if random.random() < 0.01:
                self.rotation_y += random.uniform(0, 360)

            ray = raycast(self.position, self.forward, ignore=(self,), distance=.5, debug=False)

            if not ray.hit:
                self.position += self.forward * time.dt * 1
            else:
                self.rotation_y += random.uniform(0, 360)

        ray = raycast(self.world_position, self.down, ignore=(self,), distance=.5)

        if self.gravity:
            if ray.distance <= .1:
                self.grounded = True
                # make sure it's not a wall and that the point is not too far up
                # if ray.world_normal.y > .7 and ray.world_point.y - self.world_y < .5:  # walk up slope
                #    self.y = ray.world_point[1]
                return
            else:
                self.grounded = False

            # if not on ground and not on way up in jump, fall
            self.y -= ray.distance - .05 * time.dt


    @property
    def hp(self):
        return self._hp

    @hp.setter
    def hp(self, value):
        self._hp = value
        if value < self.max_hp:
            sound()
        if value <= 0:
            model = Mesh(
                vertices=((-0.0, -1.0, 0.0), (0.7236, -0.447215, -0.52572), (-0.276385, -0.447215, -0.85064),
                          (0.7236, -0.447215, -0.52572), (-0.0, -1.0, 0.0), (0.7236, -0.447215, 0.52572),
                          (-0.0, -1.0, 0.0),
                          (-0.276385, -0.447215, -0.85064), (-0.894425, -0.447215, 0.0), (-0.0, -1.0, 0.0),
                          (-0.894425, -0.447215, 0.0), (-0.276385, -0.447215, 0.85064), (-0.0, -1.0, 0.0),
                          (-0.276385, -0.447215, 0.85064), (0.7236, -0.447215, 0.52572), (0.7236, -0.447215, -0.52572),
                          (0.7236, -0.447215, 0.52572), (0.894425, 0.447215, 0.0), (-0.276385, -0.447215, -0.85064),
                          (0.7236, -0.447215, -0.52572), (0.276385, 0.447215, -0.85064), (-0.894425, -0.447215, 0.0),
                          (-0.276385, -0.447215, -0.85064), (-0.7236, 0.447215, -0.52572),
                          (-0.276385, -0.447215, 0.85064),
                          (-0.894425, -0.447215, 0.0), (-0.7236, 0.447215, 0.52572), (0.7236, -0.447215, 0.52572),
                          (-0.276385, -0.447215, 0.85064), (0.276385, 0.447215, 0.85064), (0.7236, -0.447215, -0.52572),
                          (0.894425, 0.447215, 0.0), (0.276385, 0.447215, -0.85064), (-0.276385, -0.447215, -0.85064),
                          (0.276385, 0.447215, -0.85064), (-0.7236, 0.447215, -0.52572), (-0.894425, -0.447215, 0.0),
                          (-0.7236, 0.447215, -0.52572), (-0.7236, 0.447215, 0.52572), (-0.276385, -0.447215, 0.85064),
                          (-0.7236, 0.447215, 0.52572), (0.276385, 0.447215, 0.85064), (0.7236, -0.447215, 0.52572),
                          (0.276385, 0.447215, 0.85064), (0.894425, 0.447215, 0.0), (0.276385, 0.447215, -0.85064),
                          (0.894425, 0.447215, 0.0), (-0.0, 1.0, 0.0), (-0.7236, 0.447215, -0.52572),
                          (0.276385, 0.447215, -0.85064), (-0.0, 1.0, 0.0), (-0.7236, 0.447215, 0.52572),
                          (-0.7236, 0.447215, -0.52572), (-0.0, 1.0, 0.0), (0.276385, 0.447215, 0.85064),
                          (-0.7236, 0.447215, 0.52572), (-0.0, 1.0, 0.0), (0.894425, 0.447215, 0.0),
                          (0.276385, 0.447215, 0.85064), (-0.0, 1.0, 0.0)),
                normals=[(0.1876, -0.7947, -0.5774), (0.1876, -0.7947, -0.5774), (0.1876, -0.7947, -0.5774),
                         (0.6071, -0.7947, 0.0), (0.6071, -0.7947, 0.0), (0.6071, -0.7947, 0.0),
                         (-0.4911, -0.7947, -0.3568), (-0.4911, -0.7947, -0.3568), (-0.4911, -0.7947, -0.3568),
                         (-0.4911, -0.7947, 0.3568), (-0.4911, -0.7947, 0.3568), (-0.4911, -0.7947, 0.3568),
                         (0.1876, -0.7947, 0.5774), (0.1876, -0.7947, 0.5774), (0.1876, -0.7947, 0.5774),
                         (0.9822, -0.1876, 0.0), (0.9822, -0.1876, 0.0), (0.9822, -0.1876, 0.0),
                         (0.3035, -0.1876, -0.9342),
                         (0.3035, -0.1876, -0.9342), (0.3035, -0.1876, -0.9342), (-0.7946, -0.1876, -0.5774),
                         (-0.7946, -0.1876, -0.5774), (-0.7946, -0.1876, -0.5774), (-0.7946, -0.1876, 0.5774),
                         (-0.7946, -0.1876, 0.5774), (-0.7946, -0.1876, 0.5774), (0.3035, -0.1876, 0.9342),
                         (0.3035, -0.1876, 0.9342), (0.3035, -0.1876, 0.9342), (0.7946, 0.1876, -0.5774),
                         (0.7946, 0.1876, -0.5774), (0.7946, 0.1876, -0.5774), (-0.3035, 0.1876, -0.9342),
                         (-0.3035, 0.1876, -0.9342), (-0.3035, 0.1876, -0.9342), (-0.9822, 0.1876, 0.0),
                         (-0.9822, 0.1876, 0.0), (-0.9822, 0.1876, 0.0), (-0.3035, 0.1876, 0.9342),
                         (-0.3035, 0.1876, 0.9342), (-0.3035, 0.1876, 0.9342), (0.7946, 0.1876, 0.5774),
                         (0.7946, 0.1876, 0.5774), (0.7946, 0.1876, 0.5774), (0.4911, 0.7947, -0.3568),
                         (0.4911, 0.7947, -0.3568), (0.4911, 0.7947, -0.3568), (-0.1876, 0.7947, -0.5774),
                         (-0.1876, 0.7947, -0.5774), (-0.1876, 0.7947, -0.5774), (-0.6071, 0.7947, 0.0),
                         (-0.6071, 0.7947, 0.0), (-0.6071, 0.7947, 0.0), (-0.1876, 0.7947, 0.5774),
                         (-0.1876, 0.7947, 0.5774), (-0.1876, 0.7947, 0.5774), (0.4911, 0.7947, 0.3568),
                         (0.4911, 0.7947, 0.3568), (0.4911, 0.7947, 0.3568)],
                mode='triangle',
                colors=[color.random_color() for i in range(64)]
            )

            ep_giver = Entity(model=model, origin_y=-1, color=color.green,
                              collider='box', scale=1.7, position=self.position, parent=self.parent)
            setattr(ep_giver, 'xp_give', self.xp_to_give)
            destroy(self)
            return
        self.health_bar.world_scale_x = self.hp / self.max_hp * 1.5
        self.health_bar.alpha = 1
